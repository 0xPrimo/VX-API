#pragma once
#include "MalwareHeader.h"

#define STATUS_NO_YIELD_PERFORMED 0x40000024 

BOOL IsBeingDebuggedAlt(VOID)
{
	return GetPeb()->BeingDebugged;
}

BOOL IsIntelHardwareBreakpointPresent(VOID)
{
	BOOL bFlag = FALSE;
	PCONTEXT Context = NULL;

	Context = (PCONTEXT)VirtualAlloc(NULL, sizeof(CONTEXT), MEM_COMMIT, PAGE_READWRITE);
	if (Context == NULL)
		return FALSE;

	RtlZeroMemory(Context, sizeof(Context));

	Context->ContextFlags = CONTEXT_DEBUG_REGISTERS;

	if (!GetThreadContext(GetCurrentThreadAlt(), Context))
		goto EXIT_ROUTINE;

	if (Context->Dr0 || Context->Dr1 || Context->Dr2 || Context->Dr3)
		bFlag = TRUE;

EXIT_ROUTINE:

	if (Context)
		VirtualFree(Context, 0, MEM_RELEASE);

	return bFlag;
}

BOOL NtYieldExecutionQuerySingleStep(VOID)
{
	typedef NTSTATUS(NTAPI* NTYIELDEXECUTION)(VOID);
	NTYIELDEXECUTION NtYieldExecution = NULL;
	INT Debugged = 0;

	HMODULE hModuleNtdll = GetModuleHandleW(L"ntdll.dll");

	if (!hModuleNtdll)
		return FALSE;

	NtYieldExecution = (NTYIELDEXECUTION)GetProcAddress(hModuleNtdll, "NtYieldExecution");

	if (!NtYieldExecution)
		return FALSE;

	for (DWORD dwX = 0; dwX < 0x20; dwX++)
	{
		Sleep(0xf);

		if ((INT)NtYieldExecution() != STATUS_NO_YIELD_PERFORMED)
			Debugged++;
	}

	if (Debugged <= 3)
		return FALSE;

	return TRUE;
}

#pragma region IsNvidiaGraphicsCardPresent

BOOL IsNvidiaGraphicsCardPresentA(VOID)
{
	DISPLAY_DEVICEA DisplayDevice; RtlZeroMemory(&DisplayDevice, sizeof(DISPLAY_DEVICEA));
	DisplayDevice.cb = sizeof(DISPLAY_DEVICEW);

	DWORD dwDeviceId = ERROR_SUCCESS;

	while (EnumDisplayDevicesA(NULL, dwDeviceId, &DisplayDevice, 0))
	{
		if (StringFindSubstringA(DisplayDevice.DeviceString, (PCHAR)"NVIDIA") != NULL)
			return TRUE;
	}

	return FALSE;
}


BOOL IsNvidiaGraphicsCardPresentW(VOID)
{
	DISPLAY_DEVICEW DisplayDevice; RtlZeroMemory(&DisplayDevice, sizeof(DISPLAY_DEVICEW));
	DisplayDevice.cb = sizeof(DISPLAY_DEVICEW);

	DWORD dwDeviceId = ERROR_SUCCESS;

	while (EnumDisplayDevicesW(NULL, dwDeviceId, &DisplayDevice, 0))
	{
		if (StringFindSubstringW(DisplayDevice.DeviceString, (PWCHAR)L"NVIDIA") != NULL)
			return TRUE;
	}

	return FALSE;
}
#pragma endregion

#pragma region Check If Process Is Running By String Name
BOOL IsProcessRunningA(PCHAR ProcessNameWithExtension, BOOL IsCaseSensitive)
{
	HANDLE hProcess = NULL;

	DWORD ProcessIdArray[1024] = { 0 };
	DWORD ProcessIdArraySize = 0;
	DWORD NumberOfBytesReturned = 0;

	if (!EnumProcesses(ProcessIdArray, sizeof(ProcessIdArray), &NumberOfBytesReturned))
		return FALSE;

	ProcessIdArraySize = NumberOfBytesReturned / sizeof(DWORD);

	for (DWORD dwIndex = 0; dwIndex < ProcessIdArraySize; dwIndex++)
	{
		HMODULE Module = NULL;
		CHAR ProcessStringName[MAX_PATH] = { 0 };

		if (ProcessIdArray[dwIndex] == 0)
			continue;

		hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, ProcessIdArray[dwIndex]);
		if (hProcess == NULL)
			continue;

		if (!EnumProcessModules(hProcess, &Module, sizeof(Module), &NumberOfBytesReturned))
			continue;

		if (GetModuleBaseNameA(hProcess, Module, ProcessStringName, sizeof(ProcessStringName) / sizeof(WCHAR)) == 0)
			continue;

		if (hProcess)
			CloseHandle(hProcess);

		if (!IsCaseSensitive)
		{
			PCHAR String1 = CaplockStringA(ProcessNameWithExtension);
			PCHAR String2 = CaplockStringA(ProcessStringName);

			if (StringCompareA(String1, String2) == 0)
				return TRUE;
		}
		else {
			if (StringCompareA(ProcessStringName, ProcessNameWithExtension) == 0)
				return TRUE;
		}
	}

	return FALSE;
}

BOOL IsProcessRunningW(PWCHAR ProcessNameWithExtension, BOOL IsCaseSensitive)
{
	HANDLE hProcess = NULL;

	DWORD ProcessIdArray[1024] = { 0 };
	DWORD ProcessIdArraySize = 0;
	DWORD NumberOfBytesReturned = 0;

	if (!EnumProcesses(ProcessIdArray, sizeof(ProcessIdArray), &NumberOfBytesReturned))
		return FALSE;

	ProcessIdArraySize = NumberOfBytesReturned / sizeof(DWORD);

	for (DWORD dwIndex = 0; dwIndex < ProcessIdArraySize; dwIndex++)
	{
		HMODULE Module = NULL;
		WCHAR ProcessStringName[MAX_PATH] = { 0 };

		if (ProcessIdArray[dwIndex] == 0)
			continue;

		hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, ProcessIdArray[dwIndex]);
		if (hProcess == NULL)
			continue;

		if (!EnumProcessModules(hProcess, &Module, sizeof(Module), &NumberOfBytesReturned))
			continue;

		if (GetModuleBaseNameW(hProcess, Module, ProcessStringName, sizeof(ProcessStringName) / sizeof(WCHAR)) == 0)
			continue;

		if (hProcess)
			CloseHandle(hProcess);

		if (!IsCaseSensitive)
		{
			PWCHAR String1 = CaplockStringW(ProcessNameWithExtension);
			PWCHAR String2 = CaplockStringW(ProcessStringName);

			if (StringCompareW(String1, String2) == 0)
				return TRUE;
		}
		else {
			if (StringCompareW(ProcessStringName, ProcessNameWithExtension) == 0)
				return TRUE;
		}
	}

	return FALSE;
}

#pragma endregion

